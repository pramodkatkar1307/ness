
Why Angular?
	- Classic Web Apps - ASP.NET, JSP/Servlets, PHP
	- Single Paged Applications (SPA)
	- Frontend web apps using JavaScript. 
	- React, VueJS, EmberJS, KnockoutJS, BackboneJS and AngularJS 1.x, Angular2+
	- React VS Angular 
		- React is just a library like jquery
		- React uses Virtual DOM for fast UI rendering
		- React is mostly used for data oriented apps
		- Angular is a framework from Google
		- Provides CLI support
		- Provides features like DI, Component based dev, TypeScript support, Router engine, Built-in forms and validation

Requirements for Angular Development
	- NodeJS and NPM
	- Install Angular CLI  using NPM : npm i -g @angular/cli
	- Visual Studio Code
	- Commands : node -v
				 npm -v
				 ng --version
	- Create new project
		ng new <projectname> [options]
		eg: ng new visitorweb 
		
	- install packages 
		- npm install -S <packagename>
			- npm install -S jquery bootstrap
		- npm install -D <packagename>
Component:
	- TypeScript class decorated with @Component
	- Contians the UI templates for the apps
	- Includes one HTML and CSS file optionally a test file (.spec)
	- For creating more components we can use the command 
		ng generate component <path/name>
		ng g c components/home
		OR 
		npm run ng g c components/home
Pipes
	- Pipes typescript class used to format the output in templates
	- Eg: convert into uppercase, print numbers with comma, currency with currency symbol, date in specific format
	- Original values are not modified, only trasforms while printing
	- Built-in pipes:
		uppercase, lowercase, titlecase
		currency, 
		number
		date
		async,
		json
Directives:
	- A typescript class used to modify the behaviour of a DOM element or structure of the DOM.
	- Three types:
		- Attribute directive
			- Used to change the default behaviour or appearance of a DOM element.
			- built in : ngStyle, ngClass, click, disabled
		- Structural directive
			- Used to update the DOM tree. Elements can be added or removed from DOM.
			- built in: *ngIf, *ngFor
		- Components
			- has a template view file (HTML file)
	
	
Bindings:
	One-Way binding (variables to UI)
	Two-Way binding (variables to UI and UI to variables)
	
	Angular Binding methods:
		- Interpolation {{variable}} - One way binding
		- Property Binding  [attribute] = "variable" - One way binding
		- Event Binding (eventname) ="function()" - One way binding
	Two way binding in Angular
		[(ctrl property)]="value"
	
	
CLI command to create a model class:
	ng g interface models/visitor
	OR
	npm run ng g interface models/visitor
	
	
Services:
	-  What is Dependency Injection?
	- Write reusable code as Service classes and inject them into components, directives, pipes and other services.
	- Service class must be decorated with @Injectable decorator
	- command: 
		ng g service services/visitor
		npm run ng g s services/visitor
	
Lifecycle Hooks
	- OnInit interface-> ngOnInit() method
		- initializing variables and data
	- OnDestroy interface -> ngOnDestroy()
		- cleanup the resources
	- OnChanges interface -> ngOnChanges()
		- Execute when component data changes
		
Forms:
	For user inputs
	Angular use two types of forms:
		- ReactiveForms
			- ReactiveFormsModule import into AppModule
			- FormBuilder, FormControl, Validators, FormGroup, FormControlName
		- Template Driven Forms
			- FormsModule import into AppModule
			- NgModel, NgForm
			- HTML5 validators are used
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	
